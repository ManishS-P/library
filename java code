import java.io.*;
import java.util.*;

class Book {
    private int id;
    private String title;
    private String author;
    private String genre;
    private int year;
    private boolean isIssued;

    public Book(int id, String title, String author, String genre, int year) {
        this.id = id;
        this.title = title;
        this.author = author;
        this.genre = genre;
        this.year = year;
        this.isIssued = false;
    }

    public int getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getGenre() {
        return genre;
    }

    public int getYear() {
        return year;
    }

    public boolean isIssued() {
        return isIssued;
    }

    public void issueBook() {
        isIssued = true;
    }

    public void returnBook() {
        isIssued = false;
    }

    @Override
    public String toString() {
        return "Book ID: " + id + ", Title: " + title + ", Author: " + author + ", Genre: " + genre + ", Year: " + year + ", Issued: " + (isIssued ? "Yes" : "No");
    }
}

class Member {
    private int memberId;
    private String name;
    private ArrayList<Book> issuedBooks;

    public Member(int memberId, String name) {
        this.memberId = memberId;
        this.name = name;
        this.issuedBooks = new ArrayList<>();
    }

    public int getMemberId() {
        return memberId;
    }

    public String getName() {
        return name;
    }

    public void issueBook(Book book) {
        issuedBooks.add(book);
    }

    public void returnBook(Book book) {
        issuedBooks.remove(book);
    }

    public ArrayList<Book> getIssuedBooks() {
        return issuedBooks;
    }

    @Override
    public String toString() {
        return "Member ID: " + memberId + ", Name: " + name + ", Issued Books: " + issuedBooks.size();
    }
}

class Library {
    private ArrayList<Book> books;
    private ArrayList<Member> members;
    private final String bookFile = "books.txt";
    private final String memberFile = "members.txt";

    public Library() {
        books = new ArrayList<>();
        members = new ArrayList<>();
        loadBooks();
        loadMembers();
    }

    public void addBook(Book book) {
        books.add(book);
        saveBooks();
    }

    public void addMember(Member member) {
        members.add(member);
        saveMembers();
    }

    public void issueBook(int bookId, int memberId) {
        Book book = findBookById(bookId);
        Member member = findMemberById(memberId);

        if (book == null) {
            System.out.println("Book not found.");
        } else if (member == null) {
            System.out.println("Member not found.");
        } else if (book.isIssued()) {
            System.out.println("Book is already issued.");
        } else {
            book.issueBook();
            member.issueBook(book);
            System.out.println("Book issued successfully!");
            saveBooks();
        }
    }

    public void returnBook(int bookId, int memberId) {
        Book book = findBookById(bookId);
        Member member = findMemberById(memberId);

        if (book == null) {
            System.out.println("Book not found.");
        } else if (member == null) {
            System.out.println("Member not found.");
        } else if (!book.isIssued()) {
            System.out.println("Book is not issued.");
        } else {
            book.returnBook();
            member.returnBook(book);
            System.out.println("Book returned successfully!");
            saveBooks();
        }
    }

    public void searchBooks(String query) {
        System.out.println("Search Results:");
        for (Book book : books) {
            if (book.getTitle().toLowerCase().contains(query.toLowerCase()) ||
                book.getAuthor().toLowerCase().contains(query.toLowerCase())) {
                System.out.println(book);
            }
        }
    }

    public void displayBooks() {
        if (books.isEmpty()) {
            System.out.println("No books available in the library.");
        } else {
            System.out.println("Available Books:");
            for (Book book : books) {
                System.out.println(book);
            }
        }
    }

    public void displayMembers() {
        if (members.isEmpty()) {
            System.out.println("No members in the library.");
        } else {
            System.out.println("Library Members:");
            for (Member member : members) {
                System.out.println(member);
            }
        }
    }

    private Book findBookById(int id) {
        for (Book book : books) {
            if (book.getId() == id) {
                return book;
            }
        }
        return null;
    }

    private Member findMemberById(int id) {
        for (Member member : members) {
            if (member.getMemberId() == id) {
                return member;
            }
        }
        return null;
    }

    private void saveBooks() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(bookFile))) {
            for (Book book : books) {
                writer.write(book.getId() + "," + book.getTitle() + "," + book.getAuthor() + "," + book.getGenre() + "," + book.getYear() + "," + book.isIssued());
                writer.newLine();
            }
        } catch (IOException e) {
            System.out.println("Error saving books.");
        }
    }

    private void saveMembers() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(memberFile))) {
            for (Member member : members) {
                writer.write(member.getMemberId() + "," + member.getName());
                writer.newLine();
            }
        } catch (IOException e) {
            System.out.println("Error saving members.");
        }
    }

    private void loadBooks() {
        try (BufferedReader reader = new BufferedReader(new FileReader(bookFile))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                Book book = new Book(Integer.parseInt(parts[0]), parts[1], parts[2], parts[3], Integer.parseInt(parts[4]));
                if (Boolean.parseBoolean(parts[5])) {
                    book.issueBook();
                }
                books.add(book);
            }
        } catch (IOException e) {
            System.out.println("No existing books found.");
        }
    }

    private void loadMembers() {
        try (BufferedReader reader = new BufferedReader(new FileReader(memberFile))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                Member member = new Member(Integer.parseInt(parts[0]), parts[1]);
                members.add(member);
            }
        } catch (IOException e) {
            System.out.println("No existing members found.");
        }
    }
}

public class LibraryManagementSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Library library = new Library();

        while (true) {
            System.out.println("\nLibrary Management System");
            System.out.println("1. Add Book");
            System.out.println("2. Add Member");
            System.out.println("3. Issue Book");
            System.out.println("4. Return Book");
            System.out.println("5. Search Books");
            System.out.println("6. Display Books");
            System.out.println("7. Display Members");
            System.out.println("8. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter Book ID: ");
                    int bookId = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    System.out.print("Enter Book Title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter Book Author: ");
                    String author = scanner.nextLine();
                    System.out.print("Enter Book Genre: ");
                    String genre = scanner.nextLine();
                    System.out.print("Enter Publication Year: ");
                    int year = scanner.nextInt();
                    library.addBook(new Book(bookId, title, author, genre, year));
                    System.out.println("Book added successfully!");
                    break;

                case 2:
                    System.out.print("Enter Member ID: ");
                    int memberId = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    System.out.print("Enter Member Name: ");
                    String name = scanner.nextLine();
                    library.addMember(new Member(memberId, name));
                    System.out.println("Member added successfully!");
                    break;

                case 3:
                    System.out.print("Enter Book ID to Issue: ");
                    int issueBookId = scanner.nextInt();
                    System.out.print("Enter Member ID: ");
                    int issueMemberId = scanner.nextInt();
                    library.issueBook(issueBookId, issueMemberId);
                    break;

                case 4:
                    System.out.print("Enter Book ID to Return: ");
                    int returnBookId = scanner.nextInt();
                    System.out.print("Enter Member ID: ");
                    int returnMemberId = scanner.nextInt();
                    library.returnBook(returnBookId, returnMemberId);
                    break;

                case 5:
                    scanner.nextLine(); // Consume newline
                    System.out.print("Enter search query: ");
                    String query = scanner.nextLine();
                    library.searchBooks(query);
                    break;

                case 6:
                    library.displayBooks();
                    break;

                case 7:
                    library.displayMembers();
                    break;

                case 8:
                    System.out.println("Exiting Library Management System. Goodbye!");
                    scanner.close();
                    System.exit(0);

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
